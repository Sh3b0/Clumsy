#!/bin/bash

# Run workshop specific setup scripts and then source the corresponding profile
# scripts as well so they are available for later setup scripts. Note that this
# script will be executed inline to the start-container script. In that case
# errors in the profile scripts can cause the workshop container to not start.
# Since we cannot capture what happens in profile scripts into the log file in
# that case, and because the container will not actually start anyway, it is
# necessary to look at the container log file instead. An error in setup scripts
# on the other hand shouldn't usually cause the container to not start and the
# log can be consulted from within the workshop session container.

set -x

cd $HOME

WORKSHOP_ENV=/tmp/workshop-env-$$.sh

SETUP_LOGFILE=$HOME/.local/share/workshop/setup-scripts.log
SETUP_FAILED=$HOME/.local/share/workshop/setup-scripts.failed

rm -f $SETUP_FAILED
touch $SETUP_LOGFILE

function execute_setup_script() {
    local script=$1
    echo "Executing: $script"
    WORKSHOP_ENV=$WORKSHOP_ENV sh -x $script || touch $SETUP_FAILED || true
    cat $WORKSHOP_ENV
}

WORKSHOP_ENV_ROLLUP=$HOME/.local/share/workshop/workshop-env-$$.sh

rm -f $WORKSHOP_ENV_ROLLUP
touch $WORKSHOP_ENV_ROLLUP

for script in /opt/eduk8s/etc/setup.d/*.sh; do
    if [ -x "$script" ]; then
        truncate -s 0 $WORKSHOP_ENV
        execute_setup_script $script 2>&1 | tee -a $SETUP_LOGFILE
        set -a; . $WORKSHOP_ENV; set +a
        cat $WORKSHOP_ENV >> $WORKSHOP_ENV_ROLLUP
        [ -n "$(tail -c1 $WORKSHOP_ENV_ROLLUP)" ] && echo >> $WORKSHOP_ENV_ROLLUP
        rm -f $WORKSHOP_ENV
    fi
done

mv $WORKSHOP_ENV_ROLLUP $HOME/.local/share/workshop/workshop-env-builtin.sh

for script in /opt/eduk8s/etc/profile.d/*.sh /opt/eduk8s/etc/profile.d/sh.local; do
    if [ -r "$script" ]; then
        echo "Source: $script"
        . "$script"
    fi
done

touch $WORKSHOP_ENV_ROLLUP

for script in /opt/packages/*/setup.d/*.sh; do
    if [ -x "$script" ]; then
        truncate -s 0 $WORKSHOP_ENV
        execute_setup_script $script 2>&1 | tee -a $SETUP_LOGFILE
        set -a; . $WORKSHOP_ENV; set +a
        cat $WORKSHOP_ENV >> $WORKSHOP_ENV_ROLLUP
        [ -n "$(tail -c1 $WORKSHOP_ENV_ROLLUP)" ] && echo >> $WORKSHOP_ENV_ROLLUP
        rm -f $WORKSHOP_ENV
    fi
done

mv $WORKSHOP_ENV_ROLLUP $HOME/.local/share/workshop/workshop-env-packages.sh

for script in /opt/packages/*/profile.d/*.sh /opt/packages/*/profile.d/sh.local; do
    if [ -r "$script" ]; then
        echo "Source: $script"
        . "$script"
    fi
done

touch $WORKSHOP_ENV_ROLLUP

for script in /opt/workshop/setup.d/*.sh; do
    if [ -x "$script" ]; then
        truncate -s 0 $WORKSHOP_ENV
        execute_setup_script $script 2>&1 | tee -a $SETUP_LOGFILE
        set -a; . $WORKSHOP_ENV; set +a
        cat $WORKSHOP_ENV >> $WORKSHOP_ENV_ROLLUP
        [ -n "$(tail -c1 $WORKSHOP_ENV_ROLLUP)" ] && echo >> $WORKSHOP_ENV_ROLLUP
        rm -f $WORKSHOP_ENV
    fi
done

mv $WORKSHOP_ENV_ROLLUP $HOME/.local/share/workshop/workshop-env-content.sh

for script in /opt/workshop/profile.d/*.sh /opt/workshop/profile.d/sh.local; do
    if [ -r "$script" ]; then
        echo "Source: $script"
        . "$script"
    fi
done

touch $WORKSHOP_ENV_ROLLUP

for script in $HOME/workshop/setup.d/*.sh; do
    if [ -x "$script" ]; then
        truncate -s 0 $WORKSHOP_ENV
        execute_setup_script $script 2>&1 | tee -a $SETUP_LOGFILE
        set -a; . $WORKSHOP_ENV; set +a
        cat $WORKSHOP_ENV >> $WORKSHOP_ENV_ROLLUP
        [ -n "$(tail -c1 $WORKSHOP_ENV_ROLLUP)" ] && echo >> $WORKSHOP_ENV_ROLLUP
        rm -f $WORKSHOP_ENV
    fi
done

mv $WORKSHOP_ENV_ROLLUP $HOME/.local/share/workshop/workshop-env-homedir.sh

for script in $HOME/workshop/profile.d/*.sh $HOME/workshop/profile.d/sh.local; do
    if [ -r "$script" ]; then
        echo "Source: $script"
        . "$script"
    fi
done

# Now rebuild the workshop content. In the case of Hugo this will include
# regenerating the static HTML files making up the workshop content. In other
# cases only the snapshot of the workshop environment and parameters is created.

if [ x"$WORKSHOP_RENDERER" == x"local" ]; then
    if [ x"$LOCAL_RENDERER_TYPE" == x"" ]; then
        if [ -f $WORKSHOP_DIR/workshop.yaml -o -f $WORKSHOP_DIR/modules.yaml ]; then
            LOCAL_RENDERER_TYPE="classic"
        else
            LOCAL_RENDERER_TYPE="hugo"
        fi 
    fi
fi

export LOCAL_RENDERER_TYPE

(rebuild-content || touch $SETUP_FAILED) 2>&1 | tee -a $SETUP_LOGFILE
